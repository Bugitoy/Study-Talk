// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Plan {
  free
  premium
}

enum SubscriptionPeriod {
  monthly
  yearly
}



model User {
  id         String  @id @map("_id")
  email      String  @unique
  name       String?
  image      String?
  plan       Plan    @default(free)
  customerId String? // Stripe customer ID, this will be important when we need to delete the subscription
  university String? // User's university
  universityVerifiedAt DateTime? // When university was last verified
  universityChangeCount Int @default(0) // Number of times university has been changed

  isAdmin    Boolean  @default(false)
  isBlocked  Boolean  @default(false)

  // Reputation system fields
  reputationScore    Int @default(0) // Overall reputation score
  activityScore      Int @default(0) // Activity-based score
  qualityScore       Int @default(0) // Content quality score
  trustScore         Int @default(0) // Community trust score
  reputationLevel    String @default("NEW") // NEW, REGULAR, ACTIVE, TRUSTED, EXPERT, LEGENDARY
  
  // Activity tracking
  lastActivityAt     DateTime?
  dailyConfessions   Int @default(0)
  dailyVotes         Int @default(0)
  dailyComments      Int @default(0)
  confessionsCreated Int @default(0)
  votesCast          Int @default(0)
  commentsCreated    Int @default(0)
  
  // Bot detection
  botProbability     Int @default(0) // 0-100, higher = more likely bot
  isFlagged          Boolean @default(false)
  verificationLevel   String @default("NEW_USER") // NEW_USER, VERIFIED, TRUSTED, SUSPICIOUS
  
  // Reputation history
  reputationHistory  ReputationHistory[]
  
  Subscription Subscription?
  // Confessions relationships
  confessions Confession[]
  confessionVotes ConfessionVote[]
  confessionComments ConfessionComment[]
  savedConfessions SavedConfession[]

  // User Quizzes
  userQuizzes UserQuiz[]

  // Reports
  reports Report[] @relation("UserReports")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReputationHistory {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  userId          String
  changeType      String // ACTIVITY, QUALITY, TRUST, BOT_DETECTION, MANUAL
  changeAmount    Int    // Positive or negative change
  reason          String // Description of the change
  previousScore   Int    // Score before change
  newScore        Int    // Score after change
  
  // Enhanced reputation tracking
  reputationScore    Int?
  activityScore      Int?
  qualityScore       Int?
  trustScore         Int?
  botProbability     Int?
  reputationLevel    String?
  changeReason       String?
  botIndicators      String[] // Array of bot detection indicators
  riskLevel          String? // LOW, MEDIUM, HIGH, CRITICAL
  
  user            User @relation(fields: [userId], references: [id])
  
  createdAt       DateTime @default(now())
  
  @@index([userId])
  @@index([createdAt])
}

model Subscription {
  id     String             @id @default(cuid()) @map("_id")
  userId String             @unique
  plan   Plan
  period SubscriptionPeriod

  startDate DateTime @default(now())
  endDate   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
}



model Room {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  status String?
}

model QuizRoom {
 id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  timePerQuestion Int?
  sessions        QuizSession[]
  questions       QuizQuestion[]
  answers         QuizAnswer[]
  createdAt       DateTime       @default(now())
}

model QuizSession {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  roomId    String   @db.ObjectId
  createdAt DateTime @default(now())

  room    QuizRoom     @relation(fields: [roomId], references: [id])
  answers QuizAnswer[]
}

model QuizQuestion {
  id       String       @id @default(auto()) @map("_id") @db.ObjectId
  roomId   String       @db.ObjectId
  question String
  optionA  String
  optionB  String
  optionC  String
  optionD  String
  correct  String
  room     QuizRoom     @relation(fields: [roomId], references: [id])
  answers  QuizAnswer[]
}

model QuizAnswer {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  roomId     String       @db.ObjectId
  sessionId  String       @db.ObjectId
  questionId String       @db.ObjectId
  userId     String
  answer     String
  createdAt  DateTime     @default(now())
  room       QuizRoom     @relation(fields: [roomId], references: [id])
  session    QuizSession  @relation(fields: [sessionId], references: [id])
  question   QuizQuestion @relation(fields: [questionId], references: [id])

  @@unique([sessionId, questionId, userId])
}

model TopicQuestion {
 id        String   @id @default(auto()) @map("_id") @db.ObjectId
  topic     String
  question  String
  optionA   String
  optionB   String
  optionC   String
  optionD   String
  correct   String
  createdAt DateTime @default(now())
}

model Topic {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String   @unique
  description    String
  backgroundImage String
  createdAt      DateTime @default(now())
}

model RoomSetting {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  roomName       String
  numQuestions   Int
  timePerQuestion Int?
  mic            String
  camera         String
  participants   Int
  availability   String
  topicName      String?
  callId         String?
  createdAt      DateTime @default(now())
}
model StudyGroupRoom {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  callId    String   @unique
  roomName  String
  hostId    String
  ended     Boolean  @default(false)
  createdAt DateTime @default(now())
}

model CompeteRoom {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  callId    String   @unique
  roomName  String
  hostId    String
  ended     Boolean  @default(false)
  createdAt DateTime @default(now())
}

model StudySession {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  callId    String
  joinedAt  DateTime @default(now())
  leftAt    DateTime?
  duration  Int?     // in minutes
  date      DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, callId, date])
  @@index([userId])
  @@index([callId])
  @@index([date])
}

model CallSession {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  callId          String    @unique
  sessionStartedAt DateTime @default(now())
  sessionEndedAt  DateTime?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
}

model CallParticipant {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  callId    String
  userId    String
  joinedAt  DateTime  @default(now())
  leftAt    DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())

  @@unique([callId, userId])
}

model University {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String @unique
  domain      String? // email domain for verification (e.g., "stanford.edu")
  isVerified  Boolean @default(false) // admin verified university
  
  confessions Confession[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Confession {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  authorId    String
  universityId String? @db.ObjectId
  isAnonymous Boolean @default(true)
  
  // Engagement metrics
  hotScore    Float @default(0) // calculated hotness score
  
  // Content moderation
  isReported  Boolean @default(false)
  isHidden    Boolean @default(false)
  moderatedAt DateTime?
  
  author      User @relation(fields: [authorId], references: [id])
  university  University? @relation(fields: [universityId], references: [id])
  
  votes       ConfessionVote[]
  comments    ConfessionComment[]
  savedBy     SavedConfession[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([authorId])
  @@index([universityId])
  @@index([hotScore])
  @@index([createdAt])
}

enum VoteType {
  BELIEVE
  DOUBT
}

model ConfessionVote {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  confessionId String @db.ObjectId
  voteType     VoteType
  
  user         User @relation(fields: [userId], references: [id])
  confession   Confession @relation(fields: [confessionId], references: [id])
  
  createdAt    DateTime @default(now())
  
  @@unique([userId, confessionId])
  @@index([confessionId])
}

model ConfessionComment {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  authorId     String
  confessionId String @db.ObjectId
  parentId     String? @db.ObjectId // for reply threading
  isAnonymous  Boolean @default(true)
  
  author       User @relation(fields: [authorId], references: [id])
  confession   Confession @relation(fields: [confessionId], references: [id])
  parent       ConfessionComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies      ConfessionComment[] @relation("CommentReplies")
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([confessionId])
  @@index([authorId])
}

model SavedConfession {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  confessionId String @db.ObjectId
  
  user         User @relation(fields: [userId], references: [id])
  confession   Confession @relation(fields: [confessionId], references: [id])
  
  createdAt    DateTime @default(now())
  
  @@unique([userId, confessionId])
  @@index([userId])
}

enum ReportType {
  INAPPROPRIATE_BEHAVIOR
  HARASSMENT
  SPAM
  INAPPROPRIATE_CONTENT
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

model Report {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  reporterId  String
  reportedId  String
  callId      String?
  confessionId String?     @db.ObjectId
  reason      String
  reportType  ReportType
  status      ReportStatus @default(PENDING)
  adminNotes  String?
  resolvedBy  String?
  resolvedAt  DateTime?
  
  reporter    User @relation("UserReports", fields: [reporterId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([reporterId])
  @@index([reportedId])
  @@index([status])
  @@index([createdAt])
}

model UserReport {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  isBlocked   Boolean      @default(false)
  blockedAt   DateTime?
  blockedBy   String?
  blockReason String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RoomBan {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  callId    String
  hostId    String
  reason    String?
  bannedAt  DateTime @default(now())
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, callId])
  @@index([userId])
  @@index([callId])
}

model UserQuiz {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  title       String
  description String
  questions   UserQuizQuestion[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserQuizQuestion {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  quizId   String   @db.ObjectId
  question String
  optionA  String
  optionB  String
  optionC  String
  optionD  String
  correct  String

  quiz UserQuiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
}

model UserStreak {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique
  currentStreak   Int      @default(0)
  longestStreak   Int      @default(0)
  lastStudyDate   DateTime?
  totalStudyDays  Int      @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}